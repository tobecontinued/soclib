/* -*- c++ -*-
*
* SOCLIB_LGPL_HEADER_BEGIN
*
* This file is part of SoCLib, GNU LGPLv2.1.
*
* SoCLib is free software; you can redistribute it and/or modify it
* under the terms of the GNU Lesser General Public License as published
* by the Free Software Foundation; version 2.1 of the License.
*
* SoCLib is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the cabaied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with SoCLib; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
* 02110-1301 USA
*
* SOCLIB_LGPL_HEADER_END
*
* Copyright (c) Lab-sticc, file generated by GAUT(Version 2.4 February 2009)
*
*
*/
#ifndef _SOCLIB_CABA_MWMR_FIR16_H_
#define _SOCLIB_CABA_MWMR_FIR16_H_
#include <stdio.h>
#include <systemc.h>
#include "caba_base_module.h"
#include "fifo_ports.h"

namespace soclib { namespace caba {

using namespace sc_core;

template<typename vci_param> class Mwmr_fir16
	: public  soclib::caba::BaseModule
{
public:
	sc_in<bool> p_clk;
	sc_in<bool> p_resetn;
	soclib::caba::FifoOutput<uint32_t> p_to_ctrl;
	soclib::caba::FifoInput<uint32_t> p_from_ctrl;
private:	
	void transition();
	void genMoore();
	/* STRUCTURAL members */
	/* states of the GAUT FSMD */
	typedef enum {S0,S1,S2,S3,S4,S5,S6,S7,S8,
                      S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19} GAUT_FSM_t;
	struct Status {
		unsigned char done;
		unsigned char output_available;
	} r_status;	
	int32_t m_wait_IO;
	GAUT_FSM_t m_state_cycle;
	/* constant */
	sc_int<32> m_CoeffsLPAREN0RPAREN;
	sc_int<32> m_CoeffsLPAREN10RPAREN;
	sc_int<32> m_CoeffsLPAREN11RPAREN;
	sc_int<32> m_CoeffsLPAREN12RPAREN;
	sc_int<32> m_CoeffsLPAREN13RPAREN;
	sc_int<32> m_CoeffsLPAREN14RPAREN;
	sc_int<32> m_CoeffsLPAREN1RPAREN;
	sc_int<32> m_CoeffsLPAREN2RPAREN;
	sc_int<32> m_CoeffsLPAREN3RPAREN;
	sc_int<32> m_CoeffsLPAREN4RPAREN;
	sc_int<32> m_CoeffsLPAREN5RPAREN;
	sc_int<32> m_CoeffsLPAREN6RPAREN;
	sc_int<32> m_CoeffsLPAREN7RPAREN;
	sc_int<32> m_CoeffsLPAREN8RPAREN;
	sc_int<32> m_CoeffsLPAREN9RPAREN;
	sc_int<32> m_const_98;
	/* Output buffer */
	sc_int<32> m_recv_buffer;
	/* input */
	sc_int<32> m_data_in;
	/* output */
	sc_int<32> m_data_out;
	/* variable */
	sc_int<32> m_fir16_1680;
	sc_int<32> m_fir16_16800001;
	sc_int<32> m_fir16_16800002;
	sc_int<32> m_fir16_16800003;
	sc_int<32> m_fir16_16800004;
	sc_int<32> m_fir16_16800005;
	sc_int<32> m_fir16_16800006;
	sc_int<32> m_fir16_16800007;
	sc_int<32> m_fir16_16800008;
	sc_int<32> m_fir16_16800009;
	sc_int<32> m_fir16_16800010;
	sc_int<32> m_fir16_16800011;
	sc_int<32> m_fir16_16800012;
	sc_int<32> m_fir16_16800013;
	sc_int<32> m_fir16_16800014;
	sc_int<32> m_ValeursLPAREN10RPAREN;
	sc_int<32> m_ValeursLPAREN11RPAREN;
	sc_int<32> m_ValeursLPAREN12RPAREN;
	sc_int<32> m_ValeursLPAREN13RPAREN;
	sc_int<32> m_ValeursLPAREN14RPAREN;
	sc_int<32> m_ValeursLPAREN15RPAREN;
	sc_int<32> m_ValeursLPAREN1RPAREN;
	sc_int<32> m_ValeursLPAREN2RPAREN;
	sc_int<32> m_ValeursLPAREN3RPAREN;
	sc_int<32> m_ValeursLPAREN4RPAREN;
	sc_int<32> m_ValeursLPAREN5RPAREN;
	sc_int<32> m_ValeursLPAREN6RPAREN;
	sc_int<32> m_ValeursLPAREN7RPAREN;
	sc_int<32> m_ValeursLPAREN8RPAREN;
	sc_int<32> m_ValeursLPAREN9RPAREN;
	sc_int<32> m_temporaire;
	sc_int<32> m_temporaire0001;
	sc_int<32> m_temporaire0002;
	sc_int<32> m_temporaire0003;
	sc_int<32> m_temporaire0004;
	sc_int<32> m_temporaire0005;
	sc_int<32> m_temporaire0006;
	sc_int<32> m_temporaire0007;
	sc_int<32> m_temporaire0008;
	sc_int<32> m_temporaire0009;
	sc_int<32> m_temporaire0010;
	sc_int<32> m_temporaire0011;
	sc_int<32> m_temporaire0012;
	sc_int<32> m_temporaire0013;
	sc_int<32> m_temporaire0014;
protected:
	SC_HAS_PROCESS(Mwmr_fir16);
public:
	Mwmr_fir16(sc_module_name insname, std::vector<int> coeffs);
	~Mwmr_fir16() {}
};//en class Mwmr_fir16
	enum Vci_fir16Registers {
		STATUS,
		IN_DATA_1,
		OUT_DATA_1,
};
}}
#endif /* _SOCLIB_CABA_Mwmr_FIR16_H_ */
