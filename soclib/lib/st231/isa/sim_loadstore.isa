/**
 * Returns the target register of the load instruction.
 */
action {int} loadstore_target_register({CPU *} {cpu}) { 
  cerr << "ISS Error: action loadstore_target_register not set for: ";
  disasm(cpu,cerr);
  cerr << endl;
  exit(1);
}

//Load word & Load bytes
group_load_word.loadstore_target_register =  { return idest; }
group_load_bytes.loadstore_target_register =  { return nlidest; }

//Store word & Store bytes
group_store.loadstore_target_register =  { return rsc2; }



/**
 * Returns the memory acces size in bytes of a load / store instruction
 */
action {int} memory_access_size({CPU *} {cpu}) {  
  cerr << "ISS Error: action memory_acces_size not set for: ";
  disasm(cpu,cerr);
  cerr << endl;
  exit(1);
}

//Load word & Load bytes
group_load_word.memory_access_size =   { return 4; }
ldh.memory_access_size             =   { return 2; }
ldh_d.memory_access_size           =   { return 2; }
ldhu.memory_access_size            =   { return 2; }
ldhu_d.memory_access_size          =   { return 2; }
ldb.memory_access_size             =   { return 1; }
ldb_d.memory_access_size           =   { return 1; }
ldbu.memory_access_size            =   { return 1; }
ldbu_d.memory_access_size          =   { return 1; }

//Store word & Store bytes
stw.memory_access_size             =   { return 4; }
sth.memory_access_size             =   { return 2; }
stb.memory_access_size             =   { return 1; }



/**
 * Returns the effective memory address of the target load / store instruction.
 * In case of a load / store with update, provide the effective (non updated) address
 */
action {uint32_t} loadstore_effective_address({CPU *} {cpu}) { 
  return cpu->GetEA();
}

