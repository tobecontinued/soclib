
//*********************************************************************************
// the specific operations : immediate extension, selects, extended arithmetic
//*********************************************************************************
 op slct(stop[1]:rsv[1]:0b01[2]:0b0000[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
 op slctf(stop[1]:rsv[1]:0b01[2]:0b0001[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
 op addcg(stop[1]:rsv[1]:0b01[2]:0b0010[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
 op divs(stop[1]:rsv[1]:0b01[2]:0b0100[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])

 // immediate extension
 op imml(stop[1]:rsv[1]:0b01[2]:0b01010[5]:imm[23])
 op immr(stop[1]:rsv[1]:0b01[2]:0b01011[5]:imm[23])

 op islct(stop[1]:rsv[1]:0b01[2]:0b1000[4]:scond[3]:isrc2[9]:idest[6]:rsc1[6])
 op islctf(stop[1]:rsv[1]:0b01[2]:0b1001[4]:scond[3]:isrc2[9]:idest[6]:rsc1[6])

 op prgins(stop[1]:rsv[1]:0b01[2]:0b1111100[7]:sbrknum[21])
 op sbrk(stop[1]:rsv[1]:0b01[2]:0b1111101[7]:sbrknum[21])
 op syscall(stop[1]:rsv[1]:0b01[2]:0b1111110[7]:sbrknum[21])
 op break(stop[1]:rsv[1]:0b01[2]:0b1111111[7]:sbrknum[21])

// op slct(stop[1]:rsv[1]:0b01[2]:0b0000[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
slct.execute = {
        uint8_t op1 = cpu->GetGPB_C(scond);
        int32_t op2 = cpu->GetGPR_C(rsc1);
        int32_t op3 = cpu->GetGPR_C(rsc2);
        int32_t result;

        if(op1)
          result = op2;
        else
          result = op3;

        cpu->SetGPR_N(dest, result);
}

slct.disasm = {
	os << "slct $r" << dest << " = $b" << scond <<", $r" <<rsc1 << ", $r" << rsc2 ;
}

// op slctf(stop[1]:rsv[1]:0b01[2]:0b0001[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
slctf.execute = {
        uint8_t op1 = cpu->GetGPB_C(scond);
        int32_t op2 = cpu->GetGPR_C(rsc1);
        int32_t op3 = cpu->GetGPR_C(rsc2);
        int32_t result;

        if(op1)
          result = op3;
        else
          result = op2;

        cpu->SetGPR_N(dest, result);
}

slctf.disasm = {
	os << "slctf $r" << dest << " = $b" << scond <<", $r" <<rsc1 << ", $r" << rsc2 ;
}

// op addcg(stop[1]:rsv[1]:0b01[2]:0b0010[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
addcg.execute = {
        uint32_t op1 = cpu->GetGPR_C(rsc1);
        uint32_t op2 = cpu->GetGPR_C(rsc2);
        uint8_t op3 = cpu->GetGPB_C(scond);
        uint32_t result = op1+op2+op3;

        cpu->SetGPR_N(dest, result);
        cpu->SetGPB_N(bdest, (result&0x80000000) >> 31);
}

addcg.disasm = {
	os << "addcg $r" << dest <<", $b" <<bdest << " = $r" <<rsc1 << ", $r" << rsc2 <<", $b" << scond ;
}

// op divs(stop[1]:rsv[1]:0b01[2]:0b0100[4]:scond[3]:bdest[3]:dest[6]:rsc2[6]:rsc1[6])
divs.execute = {
        int32_t result1;
        uint8_t result2;
        int32_t op1 = cpu->GetGPR_C(rsc1);
        int32_t op2 = cpu->GetGPR_C(rsc2);
        uint8_t op3 = cpu->GetGPB_C(scond);
        uint32_t tmp = (op1*2) | op3;
       
        if(op1<0)
        {
          result1 = tmp + op2;
          result2 = 1;
        }
        else
        {
          result1 = tmp - op2;
          result2 = 0;
        }
        cpu->SetGPR_N(dest, result1);
        cpu->SetGPB_N(bdest, result2);
}

divs.disasm = {
	os << "divs $r" << dest <<", $b" <<bdest << " = $r" <<rsc1 << ", $r" << rsc2 <<", $b" << scond ;
}

// op imml(stop[1]:rsv[1]:0b01[2]:0b01010[5]:imm[23])
imml.execute = {
}
imml.disasm = {
	os << "imml " << imm ;
}

// op immr(stop[1]:rsv[1]:0b01[2]:0b01011[5]:imm[23])
immr.execute = {
}
immr.disasm = {
	os << "immr" << imm ;
}


// op islct(stop[1]:rsv[1]:0b01[2]:0b1000[4]:scond[3]:isrc2[9]:idest[6]:rsc1[6])
islct.execute = {
        uint8_t op1 = cpu->GetGPB_C(scond);
        int32_t op2 = cpu->GetGPR_C(rsc1);
        int32_t op3 = cpu->Imm(isrc2);
        int32_t result;

        if(op1)
          result = op2;
        else
          result = op3;

        cpu->SetGPR_N(idest, result);
}

islct.disasm = {
        int32_t op2 = SignEx9to32(isrc2);
	os << "slct $r" << idest << " = $b" << scond <<", $r" <<rsc1 << ", " << op2 ;
}

// op islctf(stop[1]:rsv[1]:0b01[2]:0b1001[4]:scond[3]:isrc2[9]:idest[6]:rsc1[6])
islctf.execute = {
        uint8_t op1 = cpu->GetGPB_C(scond);
        int32_t op2 = cpu->GetGPR_C(rsc1);
        int32_t op3 = cpu->Imm(isrc2);
        int32_t result;

        if(op1)
          result = op3;
        else
          result = op2;

        cpu->SetGPR_N(idest, result);
}

islctf.disasm = {
        int32_t op2 = SignEx9to32(isrc2);
	os << "slctf $r" << idest << " = $b" << scond <<", $r" <<rsc1 << ", " << op2 ;
}


// op prgins(stop[1]:rsv[1]:0b01[2]:0b1111100[7]:sbrknum[21])
prgins.execute = {
	cpu->invalidate_icache();
}

prgins.disasm = {
	os << "prgins";
}

// op sbrk(stop[1]:rsv[1]:0b01[2]:0b1111101[7]:sbrknum[21])
sbrk.execute = {
       cpu->SetException(cpu->GetException()|SBREAK_EXCEPTION);
       // operand1 = sbrknum ????
}

sbrk.disasm = {
	os << "sbrk "<< sbrknum ;
}

// op syscall(stop[1]:rsv[1]:0b01[2]:0b1111110[7]:sbrknum[21])
syscall.execute = {
       cpu->SetException(cpu->GetException()|SYSCALL_EXCEPTION);
       // operand1 = sbrknum ????
}

syscall.disasm = {
	os << "syscall "<< sbrknum ;
}

// op break(stop[1]:rsv[1]:0b01[2]:0b1111111[7]:sbrknum[21])
break.execute = {
       cpu->SetException(cpu->GetException()|ILL_INST_EXCEPTION);
       // operand1 = sbrknum ????
}

break.disasm = {
	os << "break "<< sbrknum ;
}
